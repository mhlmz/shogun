/*
 * THIS IS A GENERATED FILE!  DO NOT CHANGE THIS FILE!  CHANGE THE
 * CORRESPONDING TEMPLATE FILE, PLEASE!
 */

#include <gtest/gtest.h>
#include <shogun/machine/Machine.h>
#include <shogun/features/DenseFeatures.h>
#include <shogun/labels/Labels.h>
#include <shogun/labels/BinaryLabels.h>
#include <shogun/labels/RegressionLabels.h>
#include <shogun/io/SerializableAsciiFile.h>
#include <shogun/io/CSVFile.h>
#include <shogun/io/SGIO.h>
#include "environments/LinearTestEnvironment.h"
#include "environments/RegressionTestEnvironment.h"
#include "utils/Utils.h"

using namespace shogun;

extern LinearTestEnvironment* linear_test_env;
extern RegressionTestEnvironment* regression_test_env;

class TrainedModelSerializationTest : public ::testing::Test
{
protected:
	virtual void SetUp() {}

	virtual void TearDown()
	{
		SG_UNREF(train_feats)
		SG_UNREF(test_feats)
		SG_UNREF(train_labels)
	}

	void load_data(EProblemType pt)
	{
		switch (pt)
		{
			case PT_BINARY:
			{
				std::shared_ptr<GaussianCheckerboard> mockData =
					linear_test_env->getBinaryLabelData();
				train_feats = mockData->get_features_train();
				test_feats = mockData->get_features_test();
				train_labels = (CBinaryLabels *) mockData->get_labels_train();
				break;
			}

			case PT_REGRESSION:
				train_feats = regression_test_env->get_features_train();
				test_feats = regression_test_env->get_features_test();
				train_labels = regression_test_env->get_labels_train();
				break;

			default:
				SG_SERROR("Unsupported problem type: %d\n", pt);
				FAIL();
		}

		SG_REF(train_feats)
		SG_REF(test_feats)
		SG_REF(train_labels)
	}

	CDenseFeatures<float64_t> *train_feats, *test_feats;
	CLabels *train_labels;
};

{% macro test(class) -%}
TEST_F(TrainedModelSerializationTest, {{class}})
{
	auto machine=new {{class}}();
	load_data(machine->get_machine_problem_type());

	machine->set_features(train_feats);
	machine->set_labels(train_labels);

	bool train_success=machine->train();
	ASSERT_TRUE(train_success);

	/* to avoid serialization of the data */
//	machine->set_features(NULL);
//	machine->set_labels(NULL);

	CLabels* predictions=machine->apply(test_feats);

	std::string class_name("{{class}}");
	std::string filename = "shogun-unittest-trained-model-serialization-" + class_name + ".XXXXXX";
	generate_temp_filename(const_cast<char*>(filename.c_str()));

	CSerializableAsciiFile *file=new CSerializableAsciiFile(filename.c_str(), 'w');
	bool save_success=machine->save_serializable(file);
	file->close();
	SG_FREE(file);
	ASSERT_TRUE(save_success);

	file=new CSerializableAsciiFile(filename.c_str(), 'r');
	auto deserialized_machine=new {{class}}();
	bool load_success=deserialized_machine->load_serializable(file);
	file->close();
	SG_FREE(file);
	ASSERT_TRUE(load_success);

	CLabels* deserialized_predictions=deserialized_machine->apply(test_feats);

	float64_t accuracy=1e-13;
	ASSERT(predictions->equals(deserialized_predictions, accuracy, true))

	int delete_success=unlink(filename.c_str());
	ASSERT_EQ(0, delete_success);

	SG_FREE(machine);
	SG_FREE(deserialized_machine);
	SG_FREE(predictions);
	SG_FREE(deserialized_predictions);
}
{%- endmacro %}

{% for name, attrs in classes.items() %}
#include <{{attrs['include']}}>
{{ test(name) }}
{% endfor %}